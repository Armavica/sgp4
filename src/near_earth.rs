use crate::model;
use crate::propagator;

pub fn constants<'a>(
    geopotential: &'a model::Geopotential,
    drag_term: f64,
    orbit_0: propagator::Orbit,
    p0: f64,
    a0: f64,
    s: f64,
    xi: f64,
    eta: f64,
    c1: f64,
    c4: f64,
    k0: f64,
    k1: f64,
    k6: f64,
    k14: f64,
    p1: f64,
    p3: f64,
    p6: f64,
    p8: f64,
    p13: f64,
    p14: f64,
) -> propagator::Constants<'a> {
    propagator::Constants {
        geopotential: geopotential,
        drag_term: drag_term,

        // Œ©Ãá = p‚ÇÅ‚ÇÉ
        right_ascension_dot: p13,

        // œâÃá = k‚ÇÅ‚ÇÑ
        argument_of_perigee_dot: k14,

        // ·πÄ = p‚ÇÅ‚ÇÑ
        mean_anomaly_dot: p14,
        c1: c1,
        c4: c4,
        k0: k0,
        k1: k1,
        method: propagator::Method::NearEarth {
            a0: a0,

            //        1 J‚ÇÉ
            // k‚ÇÇ = - - -- sin I‚ÇÄ
            //        2 J‚ÇÇ
            k2: -0.5 * (geopotential.j3 / geopotential.j2) * orbit_0.inclination.sin(),

            // k‚ÇÉ = 1 - p‚ÇÄ¬≤
            k3: 1.0 - p0.powi(2),

            // k‚ÇÑ = 7 p‚ÇÄ¬≤ - 1
            k4: 7.0 * p0.powi(2) - 1.0,

            //      ‚îÇ   1 J‚ÇÉ        3 + 5 p‚ÇÄ
            // k‚ÇÖ = ‚îÇ - - -- sin I‚ÇÄ --------    if |1 + p‚ÇÄ| > 1.5 √ó 10‚Åª¬π¬≤
            //      ‚îÇ   4 J‚ÇÇ         1 + p‚ÇÄ
            //      ‚îÇ   1 J‚ÇÉ         3 + 5 p‚ÇÄ
            //      ‚îÇ - - -- sin I‚ÇÄ ----------- otherwise
            //      ‚îÇ   4 J‚ÇÇ        1.5 √ó 10‚Åª¬π¬≤
            k5: if (1.0 + p0).abs() > 1.5e-12 {
                -0.25
                    * (geopotential.j3 / geopotential.j2)
                    * orbit_0.inclination.sin()
                    * (3.0 + 5.0 * p0)
                    / (1.0 + p0)
            } else {
                -0.25
                    * (geopotential.j3 / geopotential.j2)
                    * orbit_0.inclination.sin()
                    * (3.0 + 5.0 * p0)
                    / 1.5e-12
            },
            k6: k6,
            full: if p3 < 220.0 / geopotential.ae + 1.0 {
                propagator::Full::No {}
            } else {
                // D‚ÇÇ = 4 a‚ÇÄ" Œæ C‚ÇÅ¬≤
                let d2 = 4.0 * a0 * xi * c1.powi(2);

                // p‚ÇÅ‚ÇÖ = D‚ÇÇ Œæ C‚ÇÅ / 3
                let p15 = d2 * xi * c1 / 3.0;

                // D‚ÇÉ = (17 a + s) p‚ÇÅ‚ÇÖ
                let d3 = (17.0 * a0 + s) * p15;

                // D‚ÇÑ = 0.5 p‚ÇÅ‚ÇÖ a‚ÇÄ" Œæ (221 a‚ÇÄ" + 31 s) C‚ÇÅ;
                let d4 = 0.5 * p15 * a0 * xi * (221.0 * a0 + 31.0 * s) * c1;

                propagator::Full::Yes {
                    // C‚ÇÖ = 2 p‚Çà a‚ÇÄ" p‚ÇÅ (1 + 2.75 (Œ∑¬≤ + Œ∑ e‚ÇÄ) + e‚ÇÄ Œ∑¬≥)
                    c5: 2.0
                        * p8
                        * a0
                        * p1
                        * (1.0
                            + 2.75 * (eta.powi(2) + eta * orbit_0.eccentricity)
                            + eta * orbit_0.eccentricity * eta.powi(2)),
                    d2: d2,
                    d3: d3,
                    d4: d4,
                    eta: eta,

                    // k‚Çá = (1 + Œ∑ cos M‚ÇÄ)¬≥
                    k7: (1.0 + eta * orbit_0.mean_anomaly.cos()).powi(3),

                    // k‚Çà = sin M‚ÇÄ
                    k8: orbit_0.mean_anomaly.sin(),

                    // k‚Çâ = D‚ÇÇ + 2 C‚ÇÅ¬≤
                    k9: d2 + 2.0 * c1.powi(2),

                    // k‚ÇÅ‚ÇÄ = ¬π/‚ÇÑ (3 D‚ÇÉ + C‚ÇÅ (12 D‚ÇÇ + 10 C‚ÇÅ¬≤))
                    k10: 0.25 * (3.0 * d3 + c1 * (12.0 * d2 + 10.0 * c1.powi(2))),

                    // k‚ÇÅ‚ÇÅ = ¬π/‚ÇÖ (3 D‚ÇÑ + 12 C‚ÇÅ D‚ÇÉ + 6 D‚ÇÇ¬≤ + 15 C‚ÇÅ¬≤ (2 D‚ÇÇ + C‚ÇÅ¬≤))
                    k11: 0.2
                        * (3.0 * d4
                            + 12.0 * c1 * d3
                            + 6.0 * d2.powi(2)
                            + 15.0 * c1.powi(2) * (2.0 * d2 + c1.powi(2))),

                    elliptic: if orbit_0.eccentricity > 1.0e-4 {
                        propagator::Elliptic::Yes {
                            //                    J‚ÇÉ p‚ÇÜ Œæ  n‚ÇÄ" sin I‚ÇÄ
                            // k‚ÇÅ‚ÇÇ = - 2 B* cos œâ‚ÇÄ -- ----------------
                            //                    J‚ÇÇ        e‚ÇÄ
                            k12: drag_term
                                * (-2.0
                                    * p6
                                    * xi
                                    * (geopotential.j3 / geopotential.j2)
                                    * orbit_0.mean_motion
                                    * orbit_0.inclination.sin()
                                    / orbit_0.eccentricity)
                                * orbit_0.argument_of_perigee.cos(),

                            //         2 p‚ÇÜ B*
                            // k‚ÇÅ‚ÇÉ = - - -----
                            //         3 e‚ÇÄ Œ∑
                            k13: -2.0 / 3.0 * p6 * drag_term / (orbit_0.eccentricity * eta),
                        }
                    } else {
                        propagator::Elliptic::No {}
                    },
                }
            },
        },
        orbit_0: orbit_0,
    }
}

impl<'a> propagator::Constants<'a> {
    pub fn near_earth_orbital_elements(
        &self,
        a0: f64,
        k2: f64,
        k3: f64,
        k4: f64,
        k5: f64,
        k6: f64,
        full: &propagator::Full,
        t: f64,
        p21: f64,
        p22: f64,
    ) -> propagator::Result<(propagator::Orbit, f64, f64, f64, f64, f64, f64, f64)> {
        // p‚ÇÇ‚ÇÉ = M‚ÇÄ + ·πÄ t
        let p23 = self.orbit_0.mean_anomaly + self.mean_anomaly_dot * t;
        let (argument_of_perigee, mean_anomaly, a, l, p25) = match full {
            propagator::Full::No {} => (
                // œâ = p‚ÇÇ‚ÇÇ
                p22,
                // M = p‚ÇÇ‚ÇÉ
                p23,
                // a = a‚ÇÄ" (1 - C‚ÇÅ t)¬≤
                a0 * (1.0 - self.c1 * t).powi(2),
                // ùïÉ = p‚ÇÇ‚ÇÉ + n‚ÇÄ" k‚ÇÅ t¬≤
                p23 + self.orbit_0.mean_motion * self.k1 * t.powi(2),
                // p‚ÇÇ‚ÇÖ = e‚ÇÄ - B* C‚ÇÑ t
                self.orbit_0.eccentricity - self.drag_term * self.c4 * t,
            ),
            propagator::Full::Yes {
                c5,
                d2,
                d3,
                d4,
                eta,
                k7,
                k8,
                k9,
                k10,
                k11,
                elliptic,
            } => {
                // œâ = ‚îÇ p‚ÇÇ‚ÇÇ - p‚ÇÇ‚ÇÑ if e‚ÇÄ > 10‚Åª‚Å¥
                //     ‚îÇ p‚ÇÇ‚ÇÇ       otherwise
                // M = ‚îÇ p‚ÇÇ‚ÇÉ + p‚ÇÇ‚ÇÑ if e‚ÇÄ > 10‚Åª‚Å¥
                //     ‚îÇ p‚ÇÇ‚ÇÉ       otherwise
                let (argument_of_perigee, mean_anomaly) = match elliptic {
                    propagator::Elliptic::Yes { k12, k13 } => {
                        // p‚ÇÇ‚ÇÑ = k‚ÇÅ‚ÇÉ ((1 + Œ∑ cos p‚ÇÇ‚ÇÉ)¬≥ - k‚Çá) + k‚ÇÅ‚ÇÇ t
                        let p24 = k13 * ((1.0 + eta * p23.cos()).powi(3) - k7) + k12 * t;
                        (p22 - p24, p23 + p24)
                    }
                    propagator::Elliptic::No {} => (p22, p23),
                };
                (
                    argument_of_perigee,
                    mean_anomaly,
                    // a = a‚ÇÄ" (1 - C‚ÇÅ t - D‚ÇÇ t¬≤ - D‚ÇÉ t¬≥ - D‚ÇÑ t‚Å¥)¬≤
                    a0 * (1.0 - self.c1 * t - d2 * t.powi(2) - d3 * t.powi(3) - d4 * t.powi(4))
                        .powi(2),
                    // ùïÉ = M + n‚ÇÄ" (k‚ÇÅ t¬≤ + k‚Çâ t¬≥ + t‚Å¥ (k‚ÇÅ‚ÇÄ + t k‚ÇÅ‚ÇÅ)
                    mean_anomaly
                        + self.orbit_0.mean_motion
                            * (self.k1 * t.powi(2) + k9 * t.powi(3) + t.powi(4) * (k10 + t * k11)),
                    // p‚ÇÇ‚ÇÖ = e‚ÇÄ - (B* C‚ÇÑ t + B* C‚ÇÖ (sin M - k‚Çà))
                    self.orbit_0.eccentricity
                        - (self.drag_term * self.c4 * t
                            + self.drag_term * c5 * (mean_anomaly.sin() - k8)),
                )
            }
        };
        if p25 >= 1.0 || p25 < -0.001 {
            Err(propagator::Error::new("diverging eccentricity"))
        } else {
            // e = ‚îÇ 10‚Åª‚Å∂ if p‚ÇÇ‚ÇÖ < 10‚Åª‚Å∂
            //     ‚îÇ p‚ÇÇ‚ÇÖ  otherwise
            let eccentricity = p25.max(1.0e-6);
            Ok((
                propagator::Orbit {
                    // I = I‚ÇÄ
                    inclination: self.orbit_0.inclination,

                    // Œ© = p‚ÇÇ‚ÇÅ
                    right_ascension: p21,
                    eccentricity: eccentricity,
                    argument_of_perigee: argument_of_perigee,
                    mean_anomaly: mean_anomaly,

                    // n = k‚Çë / a¬≥·êü¬≤
                    mean_motion: self.geopotential.ke / a.powf(1.5),
                },
                a,
                l,
                // p‚ÇÉ‚ÇÄ = k‚ÇÇ
                k2,
                // p‚ÇÉ‚ÇÅ = k‚ÇÉ
                k3,
                // p‚ÇÉ‚ÇÇ = k‚ÇÑ
                k4,
                // p‚ÇÉ‚ÇÉ = k‚ÇÖ
                k5,
                // p‚ÇÉ‚ÇÑ = k‚ÇÜ
                k6,
            ))
        }
    }
}
